// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/raft.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Entry struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index                int64    `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_abda01889ae4c444, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (dst *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(dst, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Entry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppendEntries struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId             string   `protobuf:"bytes,2,opt,name=leaderId" json:"leaderId,omitempty"`
	PrevLogIndex         int64    `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	Entries              []*Entry `protobuf:"bytes,4,rep,name=entries" json:"entries,omitempty"`
	LeaderCommit         int64    `protobuf:"varint,5,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
	PrevLogTerm          int64    `protobuf:"varint,6,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntries) Reset()         { *m = AppendEntries{} }
func (m *AppendEntries) String() string { return proto.CompactTextString(m) }
func (*AppendEntries) ProtoMessage()    {}
func (*AppendEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_abda01889ae4c444, []int{1}
}
func (m *AppendEntries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntries.Unmarshal(m, b)
}
func (m *AppendEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntries.Marshal(b, m, deterministic)
}
func (dst *AppendEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntries.Merge(dst, src)
}
func (m *AppendEntries) XXX_Size() int {
	return xxx_messageInfo_AppendEntries.Size(m)
}
func (m *AppendEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntries.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntries proto.InternalMessageInfo

func (m *AppendEntries) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntries) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntries) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntries) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntries) GetLeaderCommit() int64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

func (m *AppendEntries) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

type AppendEntriesResult struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesResult) Reset()         { *m = AppendEntriesResult{} }
func (m *AppendEntriesResult) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesResult) ProtoMessage()    {}
func (*AppendEntriesResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_abda01889ae4c444, []int{2}
}
func (m *AppendEntriesResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesResult.Unmarshal(m, b)
}
func (m *AppendEntriesResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesResult.Marshal(b, m, deterministic)
}
func (dst *AppendEntriesResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesResult.Merge(dst, src)
}
func (m *AppendEntriesResult) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesResult.Size(m)
}
func (m *AppendEntriesResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesResult.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesResult proto.InternalMessageInfo

func (m *AppendEntriesResult) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestVote struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId          int64    `protobuf:"varint,2,opt,name=candidateId" json:"candidateId,omitempty"`
	LastLogIndex         int64    `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	LastLogTerm          int64    `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVote) Reset()         { *m = RequestVote{} }
func (m *RequestVote) String() string { return proto.CompactTextString(m) }
func (*RequestVote) ProtoMessage()    {}
func (*RequestVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_abda01889ae4c444, []int{3}
}
func (m *RequestVote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVote.Unmarshal(m, b)
}
func (m *RequestVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVote.Marshal(b, m, deterministic)
}
func (dst *RequestVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVote.Merge(dst, src)
}
func (m *RequestVote) XXX_Size() int {
	return xxx_messageInfo_RequestVote.Size(m)
}
func (m *RequestVote) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVote.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVote proto.InternalMessageInfo

func (m *RequestVote) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVote) GetCandidateId() int64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVote) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVote) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteResult struct {
	Term                 int64    `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted          bool     `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteResult) Reset()         { *m = RequestVoteResult{} }
func (m *RequestVoteResult) String() string { return proto.CompactTextString(m) }
func (*RequestVoteResult) ProtoMessage()    {}
func (*RequestVoteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_abda01889ae4c444, []int{4}
}
func (m *RequestVoteResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteResult.Unmarshal(m, b)
}
func (m *RequestVoteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteResult.Marshal(b, m, deterministic)
}
func (dst *RequestVoteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteResult.Merge(dst, src)
}
func (m *RequestVoteResult) XXX_Size() int {
	return xxx_messageInfo_RequestVoteResult.Size(m)
}
func (m *RequestVoteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteResult.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteResult proto.InternalMessageInfo

func (m *RequestVoteResult) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResult) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func init() {
	proto.RegisterType((*Entry)(nil), "proto.Entry")
	proto.RegisterType((*AppendEntries)(nil), "proto.AppendEntries")
	proto.RegisterType((*AppendEntriesResult)(nil), "proto.AppendEntriesResult")
	proto.RegisterType((*RequestVote)(nil), "proto.RequestVote")
	proto.RegisterType((*RequestVoteResult)(nil), "proto.RequestVoteResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	AppendEntriesRPC(ctx context.Context, in *AppendEntries, opts ...grpc.CallOption) (*AppendEntriesResult, error)
	RequestVoteRPC(ctx context.Context, in *RequestVote, opts ...grpc.CallOption) (*RequestVoteResult, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) AppendEntriesRPC(ctx context.Context, in *AppendEntries, opts ...grpc.CallOption) (*AppendEntriesResult, error) {
	out := new(AppendEntriesResult)
	err := c.cc.Invoke(ctx, "/proto.Raft/AppendEntriesRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) RequestVoteRPC(ctx context.Context, in *RequestVote, opts ...grpc.CallOption) (*RequestVoteResult, error) {
	out := new(RequestVoteResult)
	err := c.cc.Invoke(ctx, "/proto.Raft/RequestVoteRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Raft service

type RaftServer interface {
	AppendEntriesRPC(context.Context, *AppendEntries) (*AppendEntriesResult, error)
	RequestVoteRPC(context.Context, *RequestVote) (*RequestVoteResult, error)
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_AppendEntriesRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntries)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntriesRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Raft/AppendEntriesRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntriesRPC(ctx, req.(*AppendEntries))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_RequestVoteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVoteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Raft/RequestVoteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVoteRPC(ctx, req.(*RequestVote))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntriesRPC",
			Handler:    _Raft_AppendEntriesRPC_Handler,
		},
		{
			MethodName: "RequestVoteRPC",
			Handler:    _Raft_RequestVoteRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/raft.proto",
}

func init() { proto.RegisterFile("proto/raft.proto", fileDescriptor_raft_abda01889ae4c444) }

var fileDescriptor_raft_abda01889ae4c444 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0xc7, 0xc9, 0x4b, 0xd2, 0xf6, 0x4d, 0xfa, 0x1e, 0x7d, 0xfb, 0x7a, 0x08, 0x39, 0x85, 0x1c,
	0xa4, 0xa7, 0x0a, 0xf5, 0x2e, 0x48, 0x2c, 0x52, 0xf0, 0x50, 0x16, 0xf1, 0xbe, 0x76, 0xa7, 0x12,
	0x68, 0x93, 0x98, 0x4c, 0x8b, 0x7e, 0x04, 0xc1, 0x2f, 0xe7, 0x37, 0x92, 0x4c, 0xb6, 0xb2, 0xd1,
	0xe0, 0x29, 0x33, 0xbf, 0x99, 0xf9, 0x67, 0xfe, 0xb3, 0x30, 0x29, 0xab, 0x82, 0x8a, 0xf3, 0x4a,
	0x6d, 0x69, 0xce, 0xa1, 0xf0, 0xf9, 0x93, 0x2c, 0xc1, 0x5f, 0xe6, 0x54, 0xbd, 0x08, 0x01, 0x1e,
	0x61, 0xb5, 0x0f, 0x9d, 0xd8, 0x99, 0xb9, 0x92, 0x63, 0x31, 0x05, 0x3f, 0xcb, 0x35, 0x3e, 0x87,
	0xbf, 0x18, 0xb6, 0x49, 0xd3, 0xa9, 0x15, 0xa9, 0xd0, 0x8d, 0x9d, 0xd9, 0x58, 0x72, 0x9c, 0xbc,
	0x3b, 0xf0, 0xe7, 0xaa, 0x2c, 0x31, 0xd7, 0x8d, 0x5a, 0x86, 0x75, 0xaf, 0x5e, 0x04, 0xa3, 0x1d,
	0x2a, 0x8d, 0xd5, 0x4a, 0xb3, 0xe4, 0x6f, 0xf9, 0x99, 0x8b, 0x04, 0xc6, 0x65, 0x85, 0xc7, 0xdb,
	0xe2, 0x71, 0xc5, 0xbf, 0x74, 0x79, 0xae, 0xc3, 0xc4, 0x19, 0x0c, 0xb1, 0x95, 0x0f, 0xbd, 0xd8,
	0x9d, 0x05, 0x8b, 0x71, 0x6b, 0x66, 0xce, 0x16, 0xe4, 0xa9, 0xd8, 0x68, 0xb5, 0xba, 0x69, 0xb1,
	0xdf, 0x67, 0x14, 0xfa, 0xad, 0x96, 0xcd, 0x44, 0x0c, 0x81, 0xd1, 0xbe, 0x6b, 0xd6, 0x1c, 0x70,
	0x8b, 0x8d, 0x92, 0x14, 0xfe, 0x77, 0x2c, 0x49, 0xac, 0x0f, 0x3b, 0xea, 0x35, 0x16, 0xc2, 0xb0,
	0x3e, 0x6c, 0x36, 0x58, 0xd7, 0xec, 0x6b, 0x24, 0x4f, 0x69, 0xf2, 0xea, 0x40, 0x20, 0xf1, 0xe9,
	0x80, 0x35, 0xdd, 0x17, 0x84, 0xbd, 0xd3, 0x31, 0x04, 0x1b, 0x95, 0xeb, 0x4c, 0x2b, 0x42, 0x73,
	0x19, 0x57, 0xda, 0x88, 0x0d, 0xa9, 0x9a, 0xbe, 0x1e, 0xc7, 0x66, 0x8d, 0x8a, 0xc9, 0xd9, 0x90,
	0xd7, 0xaa, 0x58, 0x28, 0x59, 0xc1, 0x3f, 0x6b, 0x95, 0x1f, 0xec, 0xc4, 0x10, 0x1c, 0x0b, 0xc2,
	0x9b, 0x4a, 0xe5, 0x84, 0xda, 0x58, 0xb2, 0xd1, 0xe2, 0xcd, 0x01, 0x4f, 0xaa, 0x2d, 0x89, 0x6b,
	0x98, 0x74, 0x8f, 0xb4, 0x4e, 0xc5, 0xd4, 0xbc, 0x4a, 0xa7, 0x10, 0x45, 0x7d, 0xd4, 0x2c, 0x71,
	0x09, 0x7f, 0xed, 0xcd, 0xd6, 0xa9, 0x10, 0xa6, 0xdb, 0xc2, 0x51, 0xf8, 0x9d, 0xb5, 0xf3, 0x0f,
	0x03, 0x2e, 0x5c, 0x7c, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50, 0x06, 0xa8, 0x55, 0xe7, 0x02, 0x00,
	0x00,
}
